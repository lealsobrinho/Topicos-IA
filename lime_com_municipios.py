# -*- coding: utf-8 -*-
"""Lime-com-municipios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ztG4omKiFyH2H1fe7PNoSeh8P0fx3HS

Exemplo de Lime - Antonio Leal
"""

pip install lime

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import lime.lime_tabular
from lime import lime_tabular

#dados dos municipios
fiscaliza = pd.read_csv('/content/dados-municipios.csv')
fiscaliza.head()

#separação de previsões de classe fiscalizar
previsores = fiscaliza.iloc[:,0:8].values
classe = fiscaliza.iloc[:,8].values

#label encoding de atributos não numericos
labelencoder = LabelEncoder()
previsores[:,1] = labelencoder.fit_transform(previsores[:,1])

#separamos em treino e teste
X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(previsores,
                                                                  classe,
                                                                  test_size = 0.3,
                                                                  random_state = 0)

#objeto randomforest
modelo = RandomForestClassifier(n_estimators = 100)
#treinamento
modelo.fit(X_treinamento, y_treinamento)

from sklearn.metrics import accuracy_score
acuracia = accuracy_score(y_teste, modelo.predict(X_teste))
print(f'Acurácia do modelo é: {acuracia}')

#função prever para usar na explicacao
prever = lambda x: modelo.predict_proba(x).astype(float)

# 'X_treinamento' é o conjunto de treinamento
# 'feature_names' e 'class_names' são os nomes das features e classes
explainer = lime_tabular.LimeTabularExplainer(X_treinamento, feature_names=list(fiscaliza)[0:8], class_names='fiscalizar', discretize_continuous=True)

# imprimindo uma instancia
instance = X_teste[0]

print(f"Instância: {1}")

print(f"Fiscaliza? ",modelo.predict(X_teste[:1,:8]))

print(f"cod,localidade,receita_fundeb,despesa_fundeb,quant_escolas,quant_alunos,contas_desaprovadas,pib_per_capita")
print(X_teste[0])

# Obtém a explicação para a instância
exp = explainer.explain_instance(instance, prever, num_features=6)

# Imprime as features mais importantes na explicação
print("Explicação:")
for feature, weight in exp.as_list():
    print(f"{feature}: {weight}")
print("---------------------------------------------------------")

# imprimindo todas as instancias
for i in range(len(X_teste)):
    instance = X_teste[i]

    print(f"Instância {i + 1}")
    #print(f"Instância {i + 1} - Localidade: ")

    print(f"cod,localidade,receita_fundeb,despesa_fundeb,quant_escolas,quant_alunos,contas_desaprovadas,pib_per_capita")
    print(X_teste[i])

    # Obtém a explicação para a instância
    exp = explainer.explain_instance(instance, prever, num_features=6)

    # Imprime as features mais importantes na explicação
    print("Explicação:")
    for feature, weight in exp.as_list():
        print(f"{feature}: {weight}")

    # Adicione uma linha em branco para melhorar a legibilidade
    #print("\n")

    print("---------------------------------------------------------")

"""EXIBINDO DE OUTRAS MANEIRAS"""

#linha escolhida
X_teste[0]

previsoes = modelo.predict(X_teste[:1,:8])
previsoes

#explicação, num_features é o número máximo de features que serão mostrados na explicação
exp = explainer.explain_instance(X_teste[0], prever, num_features=6)
#exp.show_in_notebook(show_all=True)
exp.show_in_notebook()
exp.as_list()

